<!DOCTYPE html>
<html lang="<%= req.session.setting ? req.session.setting.country.language.prefix: 'en' %>">
  <head>
    <title> <%=typeof title == 'undefined' ? 'Linguanski' : 'Linguanski - ' + title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/semantic.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

    <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
    <script>
      (adsbygoogle = window.adsbygoogle || []).push({
        google_ad_client: "ca-pub-7162184586303556",
        enable_page_level_ads: true
      });
    </script>
  </head>

  <body>

    <style type="text/css">
      body {
        /*background-color: #DADADA;*/
        background-image: url(/images/dreamstime-min.jpg);
        background-repeat: no-repeat;
        background-size: cover;
        -webkit-background-size: cover;
        -moz-background-size: cover;
        -o-background-size: cover;
      }
      body > .grid {
        height: 100%;
      }
      .image {
        margin-top: -100px;
      }
      .column {
        max-width: 450px;
      }
    </style>

    <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <script type="text/javascript" src="/jst.js?20170620121601"></script>
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery-3.1.1.js"></script>
    <script src="/js/dependencies/semantic.js"></script>
    <script src="/js/dependencies/lodash.js"></script>
    <script src="/js/dependencies/backbone.js"></script>
    <script src="/js/dependencies/sails.io.backbone.js"></script>
    <script src="/js/dependencies/backbone.radio.js"></script>
    <script src="/js/dependencies/backbone.marionette.js"></script>
    <script src="/js/dependencies/L.js"></script>
    <script src="/js/dependencies/FileUpload.js"></script>
    <script src="/js/accounts/authorization.js"></script>
    <script src="/js/friend/list.js"></script>
    <script src="/js/home_page.js"></script>
    <script src="/js/login/main_signin.js"></script>
    <script src="/js/login/main_signup.js"></script>
    <script src="/js/phrase/index.js"></script>
    <script src="/js/practise/index.js"></script>
    <script src="/js/profile/main.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
